#!groovy
pipeline {
    agent {
		node {
			label 'master'
			customWorkspace "D://Jenkins//${env.JOB_NAME}".replace('%2F', '_')
		}
	}

	parameters{
		string(	defaultValue: "1.0", 
				description: 'The Major.Minor.Patch for the Component level. This will update the CDA ComponentVersion.', 
				name: 'COMPONENTVERSION' )

		string(	defaultValue: '//IP/d$/is/', 
				description: 'Used for Solution file name and the build file name. Make sure they match!', 
				name: 'SHAREDURI' )

		string( defaultValue: "abc@gmail.com"
				description: 'E-mail Addresses for users who need failed or succesful build e-mails',
				name: 'EMAIL_LIST')

		booleanParam( defaultValue: false,
		        description: 'True false testing mechanism',
				name: 'FULL_BUILD')

	}

	environment {
		ComponentVersion = "${params.COMPONENTVERSION}.${env.BUILD_NUMBER}"
		PROJECT_NAME = 	"NAME"
		
	}

    options {
	    skipDefaultCheckout() 
        gitLabConnection('GitLab_Generic')	
		timeout(time: 60, unit: 'MINUTES')
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }

    stages {
		stage('Checkout') {
			steps {
				checkout scm

		//checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'WM'], [$class: 'CloneOption', noTags: true, reference: '', shallow: true, timeout: 53], [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: '/BuildScripts'] ]]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SSH_USER_WITH_KEY', url: 'git@git.s.git']]])
			}
		}

		stage('Build') {
			steps {
			    println "Starting build"
				dir("${env.WORKSPACE}\\build") {
					bat "\"${tool 'msbuild'}\"  WM.XML /p:SolutionFolder=\"${env.WORKSPACE}\" /p:BuildNumber=${env.ComponentVersion} "				
				}

				dir("${env.WORKSPACE}") {
					echo "Creating a Build status file"
                    writeFile file: "output/MR_Title.txt", text: "BUILD STATUS:"
				}
			}
		} 

		stage('Package Snapshot') {   
           when {     
				allOf {
           		    branch 'develop'    											   
					not {
						expression {
								readFile('output/MR_Title.txt').contains('FULL BUILD') 
						}
					}
				}				
            } 		
			steps {
				dir("${env.WORKSPACE}\\build") {
					bat "\"${tool 'msbuild'}\"  WM.XML /t:Publish /p:version=${env.SnapshotComponentVersion} "
				}
			}
        }

		stage('Package Full Build') {
        	when {     
				allOf  {
                    branch 'develop'   					   
    				expression {
                        readFile('output/MR_Title.txt').contains("FULL BUILD")
                    }                  
				}	
			}
			steps {
				dir("${env.WORKSPACE}\\build") {
                    bat "\"${tool 'msbuild'}\"  WM.XML /t:Publish /p:version=${env.ComponentVersion} "
				}
			}
		} 

		stage('SHARED Snapshot') {
		  when {     
				allOf  {
                    branch 'develop'    					  
					not {
						expression {
								readFile('output/MR_Title.txt').contains('FULL BUILD') 
						}
					}
				}
			}
			
			steps {
				dir("${env.WORKSPACE}\\build\\dist") {
					powershell '''
						$nupkgName = "$env:COMPONENT.$env:SnapshotComponentVersion.nupkg"
						nuget push $nupkgName -Source $env:SHAREDURI
					'''
				}
			}
		} 
		stage('SHARED FULL_BUILD') {
		  when {     
				allOf  {
					branch 'develop'                
                    expression {
                        readFile('output/MR_Title.txt').contains("FULL BUILD")
                    }
				}	
			}
            
			steps {
				dir("${env.WORKSPACE}\\build\\dist") {
                  	powershell '''
						$nupkgName = "$env:COMPONENT.$env:ComponentVersion.nupkg"
						nuget push $nupkgName -Source $env:SHAREDURI
					'''
				}
			}
		}
        
		stage('SonarQube analysis') {
        	when {     
				anyOf { branch 'develop'; branch 'release/*' }			  
				
			}
			steps {
                script {  
                           build job: 'Sonar', wait: false
                 }
              }
			 
        }
        


	

		stage('Tagging') {

			steps {
				dir("${env.WORKSPACE}\\${params.PROJECT_NAME}") {
					
					bat '''
						git config --global user.email ''
						git config --global user.name ''
						git tag -a %ComponentVersion% -m Jenkinstesting
						git push --tags "git@git.s.git"
					'''
				}
			}
		}

	}

	post {

            failure {
			updateGitlabCommitStatus name: 'build', state: 'failed'
			// Only send e-mail errors when it is the master branch
			script {
				if(env.BRANCH_NAME == 'develop') {
					emailext (
						to: "${params.EMAIL_LIST}", 
						subject: "Build ${env.BUILD_NUMBER} - FAILED (${env.JOB_NAME})" 
					)
				
				}
			}  			          
		}
		success {
			updateGitlabCommitStatus name: 'build', state: 'success'

			script {
				emailext (
						to: "${params.EMAIL_LIST}", 
						subject: "Build ${env.BUILD_NUMBER} - SUCCESS (${env.JOB_NAME})" 
					)
				
			}
		}  
	} //end of post

}